resource "azurerm_kubernetes_cluster" "{{ kubernetes_cluster.name }}" {
  ## Required Vars
  location   = "{{ kubernetes_cluster.location }}"
  name   = "{{ kubernetes_cluster.name }}"
  resource_group_name   = "{{ kubernetes_cluster.resource_group_name }}"

  ## Optional Vars
  dns_prefix   = "{{ kubernetes_cluster.dns_prefix }}"
  dns_prefix_private_cluster   = "{{ kubernetes_cluster.dns_prefix_private_cluster }}"
  automatic_channel_upgrade   = "{{ kubernetes_cluster.automatic_channel_upgrade }}"
  azure_policy_enabled   = {{ kubernetes_cluster.azure_policy_enabled }}
  disk_encryption_set_id   = "{{ kubernetes_cluster.disk_encryption_set_id }}"
  edge_zone   = "{{ kubernetes_cluster.edge_zone }}"
  http_application_routing_enabled   = {{ kubernetes_cluster.http_application_routing_enabled }}
  image_cleaner_enabled   = {{ kubernetes_cluster.image_cleaner_enabled }}
  image_cleaner_interval_hours   = "{{ kubernetes_cluster.image_cleaner_interval_hours }}"
  kubernetes_version   = "{{ kubernetes_cluster.kubernetes_version }}"
  local_account_disabled   = {{ kubernetes_cluster.local_account_disabled }}
  node_resource_group   = "{{ kubernetes_cluster.node_resource_group }}"
  oidc_issuer_enabled   = {{ kubernetes_cluster.oidc_issuer_enabled }}
  open_service_mesh_enabled   = {{ kubernetes_cluster.open_service_mesh_enabled }}
  private_cluster_enabled   = {{ kubernetes_cluster.private_cluster_enabled }}
  private_dns_zone_id   = "{{ kubernetes_cluster.private_dns_zone_id }}"
  private_cluster_public_fqdn_enabled   = {{ kubernetes_cluster.private_cluster_public_fqdn_enabled }}
  workload_identity_enabled   = {{ kubernetes_cluster.workload_identity_enabled }}
  public_network_access_enabled   = {{ kubernetes_cluster.public_network_access_enabled }}
  role_based_access_control_enabled   = {{ kubernetes_cluster.role_based_access_control_enabled }}
  run_command_enabled   = {{ kubernetes_cluster.run_command_enabled }}
  sku_tier   = "{{ kubernetes_cluster.sku_tier }}"
  tags   = "{{ kubernetes_cluster.tags | to_json | safe }}"

  ## Blocks
  aci_connector_linux {
    ## Required Block Vars
    subnet_name   = "{{ kubernetes_cluster.aci_connector_linux.subnet_name }}"
  }
  api_server_access_profile {
    ## Optional Block Vars
    authorized_ip_ranges   = "{{ kubernetes_cluster.api_server_access_profile.authorized_ip_ranges | to_json | safe }}"
    subnet_id   = "{{ kubernetes_cluster.api_server_access_profile.subnet_id }}"
    vnet_integration_enabled   = {{ kubernetes_cluster.api_server_access_profile.vnet_integration_enabled }}
  }
  auto_scaler_profile {
    ## Optional Block Vars
    balance_similar_node_groups   = {{ kubernetes_cluster.auto_scaler_profile.balance_similar_node_groups }}
    expander   = "{{ kubernetes_cluster.auto_scaler_profile.expander }}"
    max_graceful_termination_sec   = "{{ kubernetes_cluster.auto_scaler_profile.max_graceful_termination_sec }}"
    max_node_provisioning_time   = "{{ kubernetes_cluster.auto_scaler_profile.max_node_provisioning_time }}"
    max_unready_nodes   = "{{ kubernetes_cluster.auto_scaler_profile.max_unready_nodes }}"
    max_unready_percentage   = "{{ kubernetes_cluster.auto_scaler_profile.max_unready_percentage }}"
    new_pod_scale_up_delay   = "{{ kubernetes_cluster.auto_scaler_profile.new_pod_scale_up_delay }}"
    scale_down_delay_after_add   = "{{ kubernetes_cluster.auto_scaler_profile.scale_down_delay_after_add }}"
    scale_down_delay_after_deleted   = "{{ kubernetes_cluster.auto_scaler_profile.scale_down_delay_after_deleted }}"
    scale_down_delay_after_failure   = "{{ kubernetes_cluster.auto_scaler_profile.scale_down_delay_after_failure }}"
    scan_interval   = "{{ kubernetes_cluster.auto_scaler_profile.scan_interval }}"
    scale_down_unneeded   = "{{ kubernetes_cluster.auto_scaler_profile.scale_down_unneeded }}"
    scale_down_unready   = "{{ kubernetes_cluster.auto_scaler_profile.scale_down_unready }}"
    scale_down_utilization_threshold   = "{{ kubernetes_cluster.auto_scaler_profile.scale_down_utilization_threshold }}"
    empty_bulk_delete_max   = "{{ kubernetes_cluster.auto_scaler_profile.empty_bulk_delete_max }}"
    skip_nodes_with_local_storage   = {{ kubernetes_cluster.auto_scaler_profile.skip_nodes_with_local_storage }}
    skip_nodes_with_system_pods   = {{ kubernetes_cluster.auto_scaler_profile.skip_nodes_with_system_pods }}
  }
  azure_active_directory_role_based_access_control {
    ## Optional Block Vars
    managed   = {{ kubernetes_cluster.azure_active_directory_role_based_access_control.managed }}
    tenant_id   = "{{ kubernetes_cluster.azure_active_directory_role_based_access_control.tenant_id }}"
    admin_group_object_ids   = "{{ kubernetes_cluster.azure_active_directory_role_based_access_control.admin_group_object_ids | to_json | safe }}"
    azure_rbac_enabled   = {{ kubernetes_cluster.azure_active_directory_role_based_access_control.azure_rbac_enabled }}
    client_app_id   = "{{ kubernetes_cluster.azure_active_directory_role_based_access_control.client_app_id }}"
    server_app_id   = "{{ kubernetes_cluster.azure_active_directory_role_based_access_control.server_app_id }}"
    server_app_secret   = "{{ kubernetes_cluster.azure_active_directory_role_based_access_control.server_app_secret }}"
  }
  confidential_computing {
    ## Required Block Vars
    sgx_quote_helper_enabled   = {{ kubernetes_cluster.confidential_computing.sgx_quote_helper_enabled }}
  }
  monitor_metrics {
    ## Optional Block Vars
    annotations_allowed   = "{{ kubernetes_cluster.monitor_metrics.annotations_allowed }}"
    labels_allowed   = "{{ kubernetes_cluster.monitor_metrics.labels_allowed }}"
  }
  default_node_pool {
    ## Required Block Vars
    name   = "{{ kubernetes_cluster.default_node_pool.name }}"
    vm_size   = "{{ kubernetes_cluster.default_node_pool.vm_size }}"
    ## Optional Block Vars
    capacity_reservation_group_id   = "{{ kubernetes_cluster.default_node_pool.capacity_reservation_group_id }}"
    custom_ca_trust_enabled   = {{ kubernetes_cluster.default_node_pool.custom_ca_trust_enabled }}
    enable_auto_scaling   = {{ kubernetes_cluster.default_node_pool.enable_auto_scaling }}
    enable_host_encryption   = {{ kubernetes_cluster.default_node_pool.enable_host_encryption }}
    enabled_node_public_ip   = {{ kubernetes_cluster.default_node_pool.enabled_node_public_ip }}
    host_group_id   = "{{ kubernetes_cluster.default_node_pool.host_group_id }}"
    kubelet_config {
    }
    linux_os_config {
    }
    fips_enabled   = {{ kubernetes_cluster.default_node_pool.fips_enabled }}
    kubelet_disk_type   = "{{ kubernetes_cluster.default_node_pool.kubelet_disk_type }}"
    max_pods   = "{{ kubernetes_cluster.default_node_pool.max_pods }}"
    message_of_the_day   = "{{ kubernetes_cluster.default_node_pool.message_of_the_day }}"
    node_network_profile {
    }
    node_public_ip_prefix_id   = "{{ kubernetes_cluster.default_node_pool.node_public_ip_prefix_id }}"
    node_labels   = "{{ kubernetes_cluster.default_node_pool.node_labels }}"
    node_taints   = "{{ kubernetes_cluster.default_node_pool.node_taints | to_json | safe }}"
    only_critical_addons_enabled   = {{ kubernetes_cluster.default_node_pool.only_critical_addons_enabled }}
    orchestrator_version   = "{{ kubernetes_cluster.default_node_pool.orchestrator_version }}"
    os_disk_size_gb   = "{{ kubernetes_cluster.default_node_pool.os_disk_size_gb }}"
    os_disk_type   = "{{ kubernetes_cluster.default_node_pool.os_disk_type }}"
    os_sku   = "{{ kubernetes_cluster.default_node_pool.os_sku }}"
    pod_subnet_id   = "{{ kubernetes_cluster.default_node_pool.pod_subnet_id }}"
    proximity_placement_group_id   = "{{ kubernetes_cluster.default_node_pool.proximity_placement_group_id }}"
    scale_down_mode   = "{{ kubernetes_cluster.default_node_pool.scale_down_mode }}"
    temporary_name_for_rotation   = "{{ kubernetes_cluster.default_node_pool.temporary_name_for_rotation }}"
    type   = "{{ kubernetes_cluster.default_node_pool.type }}"
    tags   = "{{ kubernetes_cluster.default_node_pool.tags | to_json | safe }}"
    ultra_ssd_enabled   = {{ kubernetes_cluster.default_node_pool.ultra_ssd_enabled }}
    upgrade_settings {
    }
    vnet_subnet_id   = "{{ kubernetes_cluster.default_node_pool.vnet_subnet_id }}"
    max_count   = "{{ kubernetes_cluster.default_node_pool.max_count }}"
    min_count   = "{{ kubernetes_cluster.default_node_pool.min_count }}"
    node_count   = "{{ kubernetes_cluster.default_node_pool.node_count }}"
    workflow_runtime   = "{{ kubernetes_cluster.default_node_pool.workflow_runtime }}"
    zones   = "{{ kubernetes_cluster.default_node_pool.zones | to_json | safe }}"
  }
  identity {
    ## Required Block Vars
    type   = "{{ kubernetes_cluster.identity.type }}"
    ## Optional Block Vars
    identity_ids   = "{{ kubernetes_cluster.identity.identity_ids }}"
  }
  key_management_service {
    ## Required Block Vars
    key_vault_key_id   = "{{ kubernetes_cluster.key_management_service.key_vault_key_id }}"
    ## Optional Block Vars
    key_vault_network_access   = "{{ kubernetes_cluster.key_management_service.key_vault_network_access }}"
  }
  key_vault_secrets_provider {
    ## Optional Block Vars
    secret_rotation_enabled   = {{ kubernetes_cluster.key_vault_secrets_provider.secret_rotation_enabled }}
    secret_rotation_interval   = "{{ kubernetes_cluster.key_vault_secrets_provider.secret_rotation_interval }}"
  }
  kubelet_config {
    ## Optional Block Vars
    allowed_unsafe_sysctls   = "{{ kubernetes_cluster.kubelet_config.allowed_unsafe_sysctls | to_json | safe }}"
    container_log_max_line   = "{{ kubernetes_cluster.kubelet_config.container_log_max_line }}"
    container_log_max_size_mb   = "{{ kubernetes_cluster.kubelet_config.container_log_max_size_mb }}"
    cpu_cfs_quote_enabled   = {{ kubernetes_cluster.kubelet_config.cpu_cfs_quote_enabled }}
    cpu_cfs_quota_period   = "{{ kubernetes_cluster.kubelet_config.cpu_cfs_quota_period }}"
    cpu_manager_policy   = "{{ kubernetes_cluster.kubelet_config.cpu_manager_policy }}"
    image_gc_high_threshold   = "{{ kubernetes_cluster.kubelet_config.image_gc_high_threshold }}"
    image_gc_low_threshold   = "{{ kubernetes_cluster.kubelet_config.image_gc_low_threshold }}"
    pod_max_pid   = "{{ kubernetes_cluster.kubelet_config.pod_max_pid }}"
    topology_manager_policy   = "{{ kubernetes_cluster.kubelet_config.topology_manager_policy }}"
  }
  kubelet_identity {
    ## Optional Block Vars
    client_id   = "{{ kubernetes_cluster.kubelet_identity.client_id }}"
    object_id   = "{{ kubernetes_cluster.kubelet_identity.object_id }}"
    user_assigned_identity_id   = "{{ kubernetes_cluster.kubelet_identity.user_assigned_identity_id }}"
  }
  linux_os_config {
    ## Optional Block Vars
    swap_file_size_mb   = "{{ kubernetes_cluster.linux_os_config.swap_file_size_mb }}"
    sysctl_config {
      ## Optional Block Vars
      fs_aio_max_nr   = {{ kubernetes_cluster.linux_os_config.sysctl_config.fs_aio_max_nr }}
      fs_file_max   = {{ kubernetes_cluster.linux_os_config.sysctl_config.fs_file_max }}
      fs_inotify_max_user_watches   = {{ kubernetes_cluster.linux_os_config.sysctl_config.fs_inotify_max_user_watches }}
      fs_nr_open   = {{ kubernetes_cluster.linux_os_config.sysctl_config.fs_nr_open }}
      kernel_threads_max   = {{ kubernetes_cluster.linux_os_config.sysctl_config.kernel_threads_max }}
      net_core_netdev_max_backlog   = {{ kubernetes_cluster.linux_os_config.sysctl_config.net_core_netdev_max_backlog }}
      net_core_optmem_max   = {{ kubernetes_cluster.linux_os_config.sysctl_config.net_core_optmem_max }}
      net_core_rmem_default   = {{ kubernetes_cluster.linux_os_config.sysctl_config.net_core_rmem_default }}
      net_core_rmem_max   = {{ kubernetes_cluster.linux_os_config.sysctl_config.net_core_rmem_max }}
      net_core_somaxconn   = {{ kubernetes_cluster.linux_os_config.sysctl_config.net_core_somaxconn }}
      net_core_wmem_default   = {{ kubernetes_cluster.linux_os_config.sysctl_config.net_core_wmem_default }}
      net_core_wmem_max   = {{ kubernetes_cluster.linux_os_config.sysctl_config.net_core_wmem_max }}
      net_ipv4_ip_local_port_range_max   = {{ kubernetes_cluster.linux_os_config.sysctl_config.net_ipv4_ip_local_port_range_max }}
      net_ipv4_ip_local_port_range_min   = {{ kubernetes_cluster.linux_os_config.sysctl_config.net_ipv4_ip_local_port_range_min }}
      net_ipv4_neigh_default_gc_thresh1   = {{ kubernetes_cluster.linux_os_config.sysctl_config.net_ipv4_neigh_default_gc_thresh1 }}
      net_ipv4_neigh_default_gc_thresh2   = {{ kubernetes_cluster.linux_os_config.sysctl_config.net_ipv4_neigh_default_gc_thresh2 }}
      net_ipv4_neigh_default_gc_thresh3   = {{ kubernetes_cluster.linux_os_config.sysctl_config.net_ipv4_neigh_default_gc_thresh3 }}
      net_ipv4_tcp_fin_timeout   = {{ kubernetes_cluster.linux_os_config.sysctl_config.net_ipv4_tcp_fin_timeout }}
      net_ipv4_tcp_keepalive_intv1   = {{ kubernetes_cluster.linux_os_config.sysctl_config.net_ipv4_tcp_keepalive_intv1 }}
      net_ipv4_tcp_keepalive_probes   = {{ kubernetes_cluster.linux_os_config.sysctl_config.net_ipv4_tcp_keepalive_probes }}
      net_ipv4_tcp_keepalive_time   = {{ kubernetes_cluster.linux_os_config.sysctl_config.net_ipv4_tcp_keepalive_time }}
      net_ipv4_tcp_max_syn_backlog   = {{ kubernetes_cluster.linux_os_config.sysctl_config.net_ipv4_tcp_max_syn_backlog }}
      net_ipv4_tcp_max_tw_buckets   = {{ kubernetes_cluster.linux_os_config.sysctl_config.net_ipv4_tcp_max_tw_buckets }}
      net_ipv4_tcp_tw_reuse   = {{ kubernetes_cluster.linux_os_config.sysctl_config.net_ipv4_tcp_tw_reuse }}
      net_netfilter_nf_conntrack_buckets   = {{ kubernetes_cluster.linux_os_config.sysctl_config.net_netfilter_nf_conntrack_buckets }}
      net_netfilter_nf_conntrack_max   = {{ kubernetes_cluster.linux_os_config.sysctl_config.net_netfilter_nf_conntrack_max }}
      vm_max_map_count   = {{ kubernetes_cluster.linux_os_config.sysctl_config.vm_max_map_count }}
      vm_swappiness   = {{ kubernetes_cluster.linux_os_config.sysctl_config.vm_swappiness }}
      vm_vfs_cache_pressure   = {{ kubernetes_cluster.linux_os_config.sysctl_config.vm_vfs_cache_pressure }}
    }
    transparent_huge_page_defrag   = "{{ kubernetes_cluster.linux_os_config.transparent_huge_page_defrag }}"
    transparent_huge_page_enabled   = "{{ kubernetes_cluster.linux_os_config.transparent_huge_page_enabled }}"
  }
  node_network_profile {
    ## Optional Block Vars
    node_public_ip_tags   = "{{ kubernetes_cluster.node_network_profile.node_public_ip_tags | to_json | safe }}"
  }
  linux_profile {
    ## Required Block Vars
    admin_username   = "{{ kubernetes_cluster.linux_profile.admin_username }}"
    ssh_key {
      ## Required Block Vars
      key_data   = "{{ kubernetes_cluster.linux_profile.ssh_key.key_data }}"
    }
  }
  maintenance_window {
    ## Optional Block Vars
    allowed {
      ## Required Block Vars
      day   = "{{ kubernetes_cluster.maintenance_window.allowed.day }}"
 
      hours   = "{{ kubernetes_cluster.maintenance_window.allowed.hours }}"
 
    }
    not_allowed {
      ## Required Block Vars
      end   = "{{ kubernetes_cluster.maintenance_window.not_allowed.end }}"
 
      start   = "{{ kubernetes_cluster.maintenance_window.not_allowed.start }}"
 
    }
  }
  microsoft_defender {
    ## Required Block Vars
    log_analytics_workspace_id   = "{{ kubernetes_cluster.microsoft_defender.log_analytics_workspace_id }}"
  }
  network_profile {
    ## Required Block Vars
    network_plugin   = "{{ kubernetes_cluster.network_profile.network_plugin }}"
    ## Optional Block Vars
    network_mode   = "{{ kubernetes_cluster.network_profile.network_mode }}"
    network_policy   = "{{ kubernetes_cluster.network_profile.network_policy }}"
    dns_service_ip   = "{{ kubernetes_cluster.network_profile.dns_service_ip }}"
    docker_bridge_cidr   = "{{ kubernetes_cluster.network_profile.docker_bridge_cidr }}"
    ebpf_data_plane   = "{{ kubernetes_cluster.network_profile.ebpf_data_plane }}"
    network_plugin_mode   = "{{ kubernetes_cluster.network_profile.network_plugin_mode }}"
    outbound_type   = "{{ kubernetes_cluster.network_profile.outbound_type }}"
    pod_cidr   = "{{ kubernetes_cluster.network_profile.pod_cidr }}"
    pod_cidrs   = "{{ kubernetes_cluster.network_profile.pod_cidrs | to_json | safe }}"
    service_cidr   = "{{ kubernetes_cluster.network_profile.service_cidr }}"
    service_cidrs   = "{{ kubernetes_cluster.network_profile.service_cidrs | to_json | safe }}"
    load_balancer_sku   = "{{ kubernetes_cluster.network_profile.load_balancer_sku }}"
    load_balancer_profile {
      ## Optional Block Vars
      idle_timeout_in_minutes   = "{{ kubernetes_cluster.network_profile.load_balancer_profile.idle_timeout_in_minutes }}"
      managed_outbound_ip_count   = "{{ kubernetes_cluster.network_profile.load_balancer_profile.managed_outbound_ip_count }}"
      managed_outbound_ipv6_count   = "{{ kubernetes_cluster.network_profile.load_balancer_profile.managed_outbound_ipv6_count }}"
      outbound_ip_address_ids   = "{{ kubernetes_cluster.network_profile.load_balancer_profile.outbound_ip_address_ids }}"
      outbound_ip_prefix_ids   = "{{ kubernetes_cluster.network_profile.load_balancer_profile.outbound_ip_prefix_ids }}"
      outbound_ports_allocated   = "{{ kubernetes_cluster.network_profile.load_balancer_profile.outbound_ports_allocated }}"
    }
    nat_gateway_profile   = "{{ kubernetes_cluster.network_profile.nat_gateway_profile }}"
  }
  oms_agent {
    ## Required Block Vars
    log_anayltics_workspace_id   = "{{ kubernetes_cluster.oms_agent.log_anayltics_workspace_id }}"
    msi_auth_for_monitoring_enabled   = {{ kubernetes_cluster.oms_agent.msi_auth_for_monitoring_enabled }}
  }
  ingress_application_gateway {
    ## Optional Block Vars
    gateway_id   = "{{ kubernetes_cluster.ingress_application_gateway.gateway_id }}"
    gateway_name   = "{{ kubernetes_cluster.ingress_application_gateway.gateway_name }}"
    subnet_cidr   = "{{ kubernetes_cluster.ingress_application_gateway.subnet_cidr }}"
    subnet_id   = "{{ kubernetes_cluster.ingress_application_gateway.subnet_id }}"
  }
  service_principal {
    ## Required Block Vars
    client_id   = "{{ kubernetes_cluster.service_principal.client_id }}"
    client_secret   = "{{ kubernetes_cluster.service_principal.client_secret }}"
  }
  storage_profile {
    ## Optional Block Vars
    blob_driver_enabled   = {{ kubernetes_cluster.storage_profile.blob_driver_enabled }}
    disk_driver_enabled   = {{ kubernetes_cluster.storage_profile.disk_driver_enabled }}
    disk_driver_version   = "{{ kubernetes_cluster.storage_profile.disk_driver_version }}"
    file_driver_enabled   = {{ kubernetes_cluster.storage_profile.file_driver_enabled }}
    snapshot_controller_enabled   = {{ kubernetes_cluster.storage_profile.snapshot_controller_enabled }}
  }
  web_app_routing {
    ## Required Block Vars
    dns_zone_id   = "{{ kubernetes_cluster.web_app_routing.dns_zone_id }}"
  }
  windows_profile {
    ## Required Block Vars
    admin_username   = "{{ kubernetes_cluster.windows_profile.admin_username }}"
    ## Optional Block Vars
    admin_password   = "{{ kubernetes_cluster.windows_profile.admin_password }}"
    license   = "{{ kubernetes_cluster.windows_profile.license }}"
    gmsa {
      ## Required Block Vars
      dns_server   = "{{ kubernetes_cluster.windows_profile.gmsa.dns_server }}"
 
      root_domain   = "{{ kubernetes_cluster.windows_profile.gmsa.root_domain }}"
 
    }
  }
  workload_autoscaler_profile {
    ## Optional Block Vars
    keda_enabled   = {{ kubernetes_cluster.workload_autoscaler_profile.keda_enabled }}
    vertical_pod_autoscaler_enabled   = {{ kubernetes_cluster.workload_autoscaler_profile.vertical_pod_autoscaler_enabled }}
  }
  http_proxy_config {
    ## Optional Block Vars
    http_proxy   = "{{ kubernetes_cluster.http_proxy_config.http_proxy }}"
    https_proxy   = "{{ kubernetes_cluster.http_proxy_config.https_proxy }}"
    no_proxy   = "{{ kubernetes_cluster.http_proxy_config.no_proxy }}"
    trusted_ca   = "{{ kubernetes_cluster.http_proxy_config.trusted_ca }}"
  }
  upgrade_settings {
    ## Required Block Vars
    max_surge   = "{{ kubernetes_cluster.upgrade_settings.max_surge }}"
  }
}
